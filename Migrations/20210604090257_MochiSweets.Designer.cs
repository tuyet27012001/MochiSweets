// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MochiSweets.Models;

namespace MochiSweets.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20210604090257_MochiSweets")]
    partial class MochiSweets
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MochiSweets.Models.Account", b =>
                {
                    b.Property<int>("accountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("accountStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("passwordAccount")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("userName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("accountID");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("MochiSweets.Models.Category", b =>
                {
                    b.Property<int>("categoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("categoryName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("categoryID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("MochiSweets.Models.Customer", b =>
                {
                    b.Property<int>("customerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("birthDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("customerName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("gender")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("image")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("passwordCustomer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("phonenumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("userName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("customerID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("MochiSweets.Models.DeliveryAddress", b =>
                {
                    b.Property<int>("addressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("addressDefault")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("addressStatus")
                        .HasColumnType("int");

                    b.Property<string>("city")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("customerID")
                        .HasColumnType("int");

                    b.Property<string>("customerName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("district")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("phonenumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("addressID");

                    b.HasIndex("customerID");

                    b.ToTable("DeliveryAddresses");
                });

            modelBuilder.Entity("MochiSweets.Models.Image", b =>
                {
                    b.Property<int>("imageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("imageUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("productID")
                        .HasColumnType("int");

                    b.HasKey("imageID");

                    b.HasIndex("productID");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("MochiSweets.Models.News", b =>
                {
                    b.Property<int>("newsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("postingTitle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("newsID");

                    b.ToTable("News");
                });

            modelBuilder.Entity("MochiSweets.Models.Order", b =>
                {
                    b.Property<int>("orderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("addressID")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("orderStatus")
                        .HasColumnType("int");

                    b.Property<int>("paymentMethodID")
                        .HasColumnType("int");

                    b.HasKey("orderID");

                    b.HasIndex("addressID");

                    b.HasIndex("paymentMethodID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("MochiSweets.Models.OrdersProduct", b =>
                {
                    b.Property<int>("orderID")
                        .HasColumnType("int");

                    b.Property<int>("productID")
                        .HasColumnType("int");

                    b.Property<double>("price")
                        .HasColumnType("double");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<double>("sale")
                        .HasColumnType("double");

                    b.HasKey("orderID", "productID");

                    b.HasIndex("productID");

                    b.ToTable("OrdersProduct");
                });

            modelBuilder.Entity("MochiSweets.Models.PaymentsMethod", b =>
                {
                    b.Property<int>("PaymentsMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PaymentsMethodName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("PaymentsMethodID");

                    b.ToTable("PaymentsMethod");
                });

            modelBuilder.Entity("MochiSweets.Models.Product", b =>
                {
                    b.Property<int>("productID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("categoryID")
                        .HasColumnType("int");

                    b.Property<string>("detail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("numberOfCakes")
                        .HasColumnType("int");

                    b.Property<double>("price")
                        .HasColumnType("double");

                    b.Property<string>("productName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("product_status")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("productID");

                    b.HasIndex("categoryID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("MochiSweets.Models.SaleOff", b =>
                {
                    b.Property<int>("saleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("endTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("productID")
                        .HasColumnType("int");

                    b.Property<double>("sale")
                        .HasColumnType("double");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("saleID");

                    b.HasIndex("productID");

                    b.ToTable("SaleOff");
                });

            modelBuilder.Entity("MochiSweets.Models.Taste", b =>
                {
                    b.Property<int>("tasteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("categoryID")
                        .HasColumnType("int");

                    b.Property<string>("image")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("tasteName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("tasteID");

                    b.HasIndex("categoryID");

                    b.ToTable("Taste");
                });

            modelBuilder.Entity("MochiSweets.Models.DeliveryAddress", b =>
                {
                    b.HasOne("MochiSweets.Models.Customer", "Customer")
                        .WithMany("ListAddress")
                        .HasForeignKey("customerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MochiSweets.Models.Image", b =>
                {
                    b.HasOne("MochiSweets.Models.Product", "Product")
                        .WithMany("ListImage")
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MochiSweets.Models.Order", b =>
                {
                    b.HasOne("MochiSweets.Models.DeliveryAddress", "DeliveryAddress")
                        .WithMany()
                        .HasForeignKey("addressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MochiSweets.Models.PaymentsMethod", "PaymentsMethod")
                        .WithMany()
                        .HasForeignKey("paymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MochiSweets.Models.OrdersProduct", b =>
                {
                    b.HasOne("MochiSweets.Models.Order", "Order")
                        .WithMany("ListOrdersProduct")
                        .HasForeignKey("orderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MochiSweets.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MochiSweets.Models.Product", b =>
                {
                    b.HasOne("MochiSweets.Models.Category", "Category")
                        .WithMany("ListProduct")
                        .HasForeignKey("categoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MochiSweets.Models.SaleOff", b =>
                {
                    b.HasOne("MochiSweets.Models.Product", "Product")
                        .WithMany("ListSaleOff")
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MochiSweets.Models.Taste", b =>
                {
                    b.HasOne("MochiSweets.Models.Category", "Category")
                        .WithMany("ListTaste")
                        .HasForeignKey("categoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
